
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Chibimul
 */
public class NeuralNetworkMain extends javax.swing.JFrame {

    public static int numEpochs = 500; //number of training cycles
    public static int numInputs  = 4; //number of inputs - this includes the input bias
    public static int numHidden  = 5; //number of hidden units
    public static int numPatterns; //number of training patterns
    public static double LR_IH = 0.07; //learning rate
    public static double LR_HO = 0.007; //learning rate

    //process variables
    public static int patNum;
    public static double errThisPat;
    public static double outPred;
    public static double RMSerror;

    //training data
    public static double[][] trainInputs;
    public static double[] trainOutput;

    //the outputs of the hidden neurons
    public static double[] hiddenVal  = new double[numHidden];

    //the weights
    public static double[][] weightsIH = new double[numInputs][numHidden];
    public static double[] weightsHO = new double[numHidden];
    
    private FileInputStream file; 
    
    private JFileChooser chooser = new JFileChooser();
    private POIFSFileSystem fs;
    private XSSFWorkbook wb;
    private XSSFSheet sheet;
    private XSSFRow row;
    private XSSFCell cell;
    
    /**
     * Creates new form NeuralNetworkMain
     */
    public NeuralNetworkMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtAssist = new javax.swing.JTextField();
        txtKill = new javax.swing.JTextField();
        txtDeath = new javax.swing.JTextField();
        btnconfirm = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaPane = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtKill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKillActionPerformed(evt);
            }
        });

        btnconfirm.setText("Confirm");
        btnconfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconfirmActionPerformed(evt);
            }
        });

        txaPane.setColumns(20);
        txaPane.setRows(5);
        jScrollPane1.setViewportView(txaPane);

        jLabel1.setText("Assist");

        jLabel2.setText("Death");

        jLabel3.setText("Kill");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Penentuan Hasil Permainan Mobile Arena");

        jButton1.setText("Import Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDeath, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtKill, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAssist, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(btnconfirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(txtDeath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAssist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnconfirm)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtKillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKillActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKillActionPerformed

    private void btnconfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconfirmActionPerformed
        // TODO add your handling code here:
        calcD();
       
        
    }//GEN-LAST:event_btnconfirmActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        int option = chooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            try {
                file = new FileInputStream(f);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NeuralNetworkMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            initWeights();
            //load in the data
            initData();
            //train the network
            for(int j = 0;j <= numEpochs;j++)
            {

                for(int i = 0;i<numPatterns;i++)
                {

                    //select a pattern at random
                    patNum = (int)((Math.random()*numPatterns)-0.001);
                    //patNum = i;

                    //calculate the current network output
                    //and error for this pattern
                    calcNet();

                    //change network weights
                    WeightChangesHO();
                    WeightChangesIH();
                    //ystem.out.println("data ke-"+i+" ,kill ="+trainInputs[i][0]+" ,death= "+trainInputs[i][1]+",assist= "+trainInputs[i][2]+",hasil= "+trainOutput[i]);
                }

                //display the overall network error
                //after each epoch
                calcOverallError();
                txaPane.append("\nepoch = " + j + "  RMS Error = " + RMSerror);

            }
        }
        displayResults();
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void calcNet()
     {
        //calculate the outputs of the hidden neurons
        //the hidden neurons are tanh
        for(int i = 0;i<numHidden;i++)
        {
            hiddenVal[i] = 0.0;

            for(int j = 0;j<numInputs;j++)
            hiddenVal[i] = hiddenVal[i] + (trainInputs[patNum][j] * weightsIH[j][i]);

            hiddenVal[i] = tanh(hiddenVal[i]);
        }

       //calculate the output of the network
       //the output neuron is linear
       outPred = 0.0;

       for(int i = 0;i<numHidden;i++)
        outPred = outPred + hiddenVal[i] * weightsHO[i];

        //calculate the error
        errThisPat = outPred - trainOutput[patNum];
     }
    
    private void calcD(){
        //calculate the outputs of the hidden neurons
        //the hidden neurons are tanh
        double[] data = new double[numInputs];
        data[0] = Integer.parseInt(txtKill.getText());
        data[1] = Integer.parseInt(txtDeath.getText());
        data[2] = Integer.parseInt(txtAssist.getText());
        data[3] = 1;
        for(int i = 0;i<numHidden;i++)
        {
            hiddenVal[i] = 0.0;

            for(int j = 0;j<numInputs;j++)
            hiddenVal[i] = hiddenVal[i] + (data[j] * weightsIH[j][i]);

            hiddenVal[i] = tanh(hiddenVal[i]);
        }

       //calculate the output of the network
       //the output neuron is linear
       outPred = 0.0;

       for(int i = 0;i<numHidden;i++)
        outPred = outPred + hiddenVal[i] * weightsHO[i];
       
       txaPane.append("\ndata = k->"+data[0]+" d->"+data[1]+" a->"+data[2] + " neural model = " + outPred);
    }


    //************************************
     public static void WeightChangesHO()
     //adjust the weights hidden-output
     {
       for(int k = 0;k<numHidden;k++)
       {
        double weightChange = LR_HO * errThisPat * hiddenVal[k];
        weightsHO[k] = weightsHO[k] - weightChange;

        //regularisation on the output weights
        if (weightsHO[k] < -5)
            weightsHO[k] = -5;
        else if (weightsHO[k] > 5)
            weightsHO[k] = 5;
       }
     }


    //************************************
     public static void WeightChangesIH()
     //adjust the weights input-hidden
     {
      for(int i = 0;i<numHidden;i++)
      {
       for(int k = 0;k<numInputs;k++)
       {
        double x = 1 - (hiddenVal[i] * hiddenVal[i]);
        x = x * weightsHO[i] * errThisPat * LR_IH;
        x = x * trainInputs[patNum][k];
        double weightChange = x;
        weightsIH[k][i] = weightsIH[k][i] - weightChange;
       }
      }
     }


    //************************************
     public static void initWeights()
     {

      for(int j = 0;j<numHidden;j++)
      {
        weightsHO[j] = (Math.random() - 0.5)/2;
        for(int i = 0;i<numInputs;i++)
        weightsIH[i][j] = (Math.random() - 0.5)/5;
      }

     }


    //************************************
     public void initData()
     {

        txaPane.setText("initialising data");

        // the data here is the XOR data
        // it has been rescaled to the range
        // [-1][1]
        // an extra input valued 1 is also added
        // to act as the bias

        
        try {
                wb = new XSSFWorkbook(file);
                sheet = wb.getSheetAt(0);
                int  rows; // No of rows
                rows = sheet.getPhysicalNumberOfRows();

                int cols = 0; // No of columns
                int tmp = 0;
                
                numPatterns = rows-1;
                System.out.println("row = "+rows);
                System.out.println("cols = "+cols);
                trainInputs  = new double[rows-1][numInputs];
                trainOutput = new double[rows-1];

                // This trick ensures that we get the data properly even if it doesn't start from first few rows
//                for(int i = 0; i < 10 || i < rows; i++) {
//                    row = sheet.getRow(i);
//                    if(row != null) {
//                        tmp = sheet.getRow(i).getPhysicalNumberOfCells();
//                        if(tmp > cols) cols = tmp;
//                    }
//                }
                cols = sheet.getRow(0).getPhysicalNumberOfCells();
                System.out.println("cols = "+cols);

                for(int r = 1; r < rows; r++) {
                    row = sheet.getRow(r);
                    if(row != null) {
                        for(int c = 1; c < cols; c++) {
                            cell = row.getCell((short)c);
                            if(cell != null) {
                                if (c == (cols-1)) {
                                    trainOutput[r-1] = cell.getNumericCellValue();
                                }else{
                                    trainInputs[r-1][c-1] = cell.getNumericCellValue();
                                }
                            }
                        }
                    }
                }
                for(int r = 1; r < rows; r++) {
                    trainInputs[r-1][3] = 1;//bias
                }
                
            } catch (IOException ex) {
                Logger.getLogger(NeuralNetworkMain.class.getName()).log(Level.SEVERE, null, ex);
            }

     }


    //************************************
     public static double tanh(double x){
        if (x > 20)
            return 1;
        else if (x < -20)
            return -1;
        else
            {
            double a = Math.exp(x);
            double b = Math.exp(-x);
            return (a-b)/(a+b);
            }
     }


    //************************************
     public void displayResults(){
         txaPane.append("\nResult:");
         for(int i = 0;i<numPatterns;i++)
            {
            patNum = i;
            calcNet();
            txaPane.append("\npat = " + (patNum+1) +"data = k->"+trainInputs[patNum][0]+" d->"+trainInputs[patNum][1]+" a->"+trainInputs[patNum][2]+ " actual = " + trainOutput[patNum] + " neural model = " + outPred);
            }
        }


    //************************************
    public static void calcOverallError(){
         RMSerror = 0.0;
         for(int i = 0;i<numPatterns;i++)
            {
            patNum = i;
            calcNet();
            RMSerror = RMSerror + (errThisPat * errThisPat);
            }
         RMSerror = RMSerror/numPatterns;
         RMSerror = java.lang.Math.sqrt(RMSerror);
    }    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NeuralNetworkMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NeuralNetworkMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NeuralNetworkMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NeuralNetworkMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NeuralNetworkMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnconfirm;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txaPane;
    private javax.swing.JTextField txtAssist;
    private javax.swing.JTextField txtDeath;
    private javax.swing.JTextField txtKill;
    // End of variables declaration//GEN-END:variables
}
